<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jiang Kai's Blog]]></title>
  <link href="http://blog.jiang-kai.com/atom.xml" rel="self"/>
  <link href="http://blog.jiang-kai.com/"/>
  <updated>2014-01-02T23:42:01-08:00</updated>
  <id>http://blog.jiang-kai.com/</id>
  <author>
    <name><![CDATA[Jiang Kai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[有序链表合并]]></title>
    <link href="http://blog.jiang-kai.com/blog/2014/01/02/you-xu-lian-biao-he-bing/"/>
    <updated>2014-01-02T23:21:00-08:00</updated>
    <id>http://blog.jiang-kai.com/blog/2014/01/02/you-xu-lian-biao-he-bing</id>
    <content type="html"><![CDATA[<p>问题：
两个有序单链表，现在需要实现这两个链表合并，并保证合并后的链表依然有序。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">node</span> <span class="o">*</span><span class="nf">list_emerge</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">head1</span><span class="p">,</span> <span class="n">node</span> <span class="o">*</span><span class="n">head2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">**</span><span class="n">head</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">*</span><span class="n">dummy</span> <span class="o">=</span> <span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">node</span><span class="p">));</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">*</span><span class="n">new</span> <span class="o">=</span> <span class="n">dummy</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">head1</span> <span class="o">&amp;&amp;</span> <span class="n">head2</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">head</span> <span class="o">=</span> <span class="n">head1</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">head2</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">?</span> <span class="o">&amp;</span><span class="n">head1</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">head2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">new</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="n">new</span> <span class="o">=</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">head</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">head</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">new</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">head1</span> <span class="o">?</span> <span class="n">head1</span> <span class="o">:</span> <span class="n">head2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">new</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">dummy</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">new</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>采用非递归方式实现，dummy的引入是方便确定头节点以及应对head1,head2可能为空的情况</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python ElementTree如何处理xml文件中的注释]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/12/20/python-elementtreeru-he-chu-li-xmlwen-jian-zhong-de-zhu-shi/"/>
    <updated>2013-12-20T02:25:00-08:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/12/20/python-elementtreeru-he-chu-li-xmlwen-jian-zhong-de-zhu-shi</id>
    <content type="html"><![CDATA[<p>在用python的ElementTree处理xml文件的时候，有一个问题比较烦人：  <br/>
当你的xml文件里有注释的时候，调用ElementTree.write()的时候会把注释去掉后保存，对于这种情况，需要加入以下代码进行处理：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">xml.etree.ElementTree</span> <span class="kn">as</span> <span class="nn">ET</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CommentParser</span><span class="p">(</span><span class="n">ET</span><span class="o">.</span><span class="n">XMLTreeBuilder</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">ET</span><span class="o">.</span><span class="n">XMLTreeBuilder</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># assumes ElementTree 1.2.X</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_parser</span><span class="o">.</span><span class="n">CommentHandler</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">handle_comment</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle_comment</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_target</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">ET</span><span class="o">.</span><span class="n">Comment</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_target</span><span class="o">.</span><span class="n">data</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_target</span><span class="o">.</span><span class="n">end</span><span class="p">(</span><span class="n">ET</span><span class="o">.</span><span class="n">Comment</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ET</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">CommentParser</span><span class="p">())</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>本质上就是在调用ElementTree.parser()的时候，传入处理comment的handler，方法其实就是ElementTree.Comment()，不知道什么时候ElementTree的版本能自己加入啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[比较geek的strcmp实现]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/12/06/bi-jiao-geekde-strcmpshi-xian/"/>
    <updated>2013-12-06T03:47:00-08:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/12/06/bi-jiao-geekde-strcmpshi-xian</id>
    <content type="html"><![CDATA[<p>自己好玩实现了个strcmp，和string.h里面的strcmp返回值一致。</p>

<p>比较geek的地方在类似my_strcmp(&ldquo;com&rdquo;,&ldquo;computer&rdquo;)的时候程序的执行流程还有最后返回值那块。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">my_strcmp</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="n">assert</span><span class="p">(</span><span class="n">str1</span> <span class="o">&amp;&amp;</span> <span class="n">str2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">ret</span> <span class="o">=</span> <span class="o">*</span><span class="n">str1</span> <span class="o">-</span> <span class="o">*</span><span class="n">str2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">str1</span><span class="o">++</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">str2</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="o">!!</span><span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单链表反转]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/12/06/lian-biao-fan-zhuan/"/>
    <updated>2013-12-06T02:31:00-08:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/12/06/lian-biao-fan-zhuan</id>
    <content type="html"><![CDATA[<p>闲的没事实现了一个单链表反转，不知道还有没有更优雅点的实现，类似<a href="http://coolshell.cn/articles/8990.html">linus:利用二级指针删除单向链表</a>这种。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">node</span> <span class="o">*</span><span class="nf">list_reverse</span><span class="p">(</span><span class="n">node</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">node</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">head</span><span class="p">){</span>
</span><span class='line'>        <span class="n">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span><span class='line'>        <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">prev</span><span class="p">;</span>
</span><span class='line'>        <span class="n">prev</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span><span class='line'>        <span class="n">head</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="cm">/*return new head*/</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">prev</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs缩进格式问题]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/11/01/emacssuo-jin-ge-shi-wen-ti/"/>
    <updated>2013-11-01T01:16:00-07:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/11/01/emacssuo-jin-ge-shi-wen-ti</id>
    <content type="html"><![CDATA[<p>各个编辑器之间最大的问题就是格式不统一，经常这边格式改的挺好，在另外一个编辑器里打开就又不对齐了，归结到最重要的一个问题就是TAB的不统一，有的编辑器默认TAB是4，有的是8，有的是6&hellip;.  <br/>
解决这个问题的方法就是强制用空格来替代TAB，这样就解决了编辑器之间不统一的问题，只要同一种格式在各种编辑器打开都是统一风格了。  <br/>
emacs解决这个问题的方法就是将<code>indent-tabs-mode</code>这个变量设置为无效就行。正确的设置方式如下:</p>

<pre><code>(defconst mystyle
  '(......)
  "mystyle" )
(c-add-style "mystyle" mystyle)
(defun myhook()
  (setq indent-tabs-mode nil)
  (c-set-style "mystyle"))
(add-hook 'c++-mode-hook 'myhook
</code></pre>

<p>改完后世界终于清净了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何加速emacs cscope查询速度]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/10/29/ru-he-jia-su-emacs-cscopecha-xun-su-du/"/>
    <updated>2013-10-29T02:51:00-07:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/10/29/ru-he-jia-su-emacs-cscopecha-xun-su-du</id>
    <content type="html"><![CDATA[<p>emacs + cscope对于小项目来说速度还不错，但是对于动不动几百兆甚至上G的源代码，速度明显超出忍受范围，由于工作原因，项目代码较多，在emacs下用cscope C-s s s搜索symbol速度慢得几乎无法忍受，需要100s以上，后来搜索下了资料并且观察了下cscope命令行参数以及cscope-indexer脚本，发现可以采用两个步骤就能加速上百倍搜索性能:</p>

<h3>1.不要让emacs边搜索边更新</h3>

<p>cscope默认在每次进行查找时更新cscope.out。当工程十分庞大时，建议关闭该选项以提高查找速度。方法是在~/.emacs文件中加入</p>

<pre><code>(setq cscope-do-not-update-database t)    
</code></pre>

<h3>2.cscope建立反向索引</h3>

<p>cscope参数中-q可以建立反向索引来加速搜索，但是默认的cscope-indexer没有开启这个功能，因此需要修改默认的cscope-indexer脚本，把</p>

<pre><code>cscope -b -i $LIST_FILE -f $DATABASE_FILE
</code></pre>

<p>替换为</p>

<pre><code>cscope -q -b -i $LIST_FILE -f $DATABASE_FILE
</code></pre>

<p>然后删掉cscope相关文件，重新生成，再试一次，搜索时间基本上就稳定在1s以内了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在宏定义中计算柔性数组元素大小]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/10/25/code-tricks-1/"/>
    <updated>2013-10-25T11:28:00-07:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/10/25/code-tricks-1</id>
    <content type="html"><![CDATA[

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;inttypes.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_id_list</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">uint16_t</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint16_t</span> <span class="n">uid</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint16_t</span> <span class="n">elts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="n">id_list_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAX_ELEM 10</span>
</span><span class='line'><span class="cp">#define MAX_LEN sizeof(id_list_t) + MAX_ELEM * sizeof(((id_list_t *)0)-&gt;elts[0])</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">uint8_t</span> <span class="n">id_list_buf</span><span class="p">[</span><span class="n">MAX_LEN</span><span class="p">];</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">id_list_buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MAX_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">uint16_t</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="n">id_list_t</span> <span class="o">*</span> <span class="n">p_id_list</span> <span class="o">=</span> <span class="p">(</span><span class="n">id_list_t</span> <span class="o">*</span><span class="p">)</span><span class="n">id_list_buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">p_id_list</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">=</span> <span class="n">MAX_ELEM</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p_id_list</span><span class="o">-&gt;</span><span class="n">uid</span> <span class="o">=</span> <span class="mi">257</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_ELEM</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">p_id_list</span><span class="o">-&gt;</span><span class="n">elts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;MAX_LEN = %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">MAX_LEN</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_LEN</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">id_list_buf</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[添加新浪微博api接口的总结]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/10/15/tian-jia-xin-lang-wei-bo-apijie-kou-de-zong-jie/"/>
    <updated>2013-10-15T15:00:00-07:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/10/15/tian-jia-xin-lang-wei-bo-apijie-kou-de-zong-jie</id>
    <content type="html"><![CDATA[<p>我的博客主要用了<a href="http://open.weibo.com">新浪微博开放平台</a>提供的三种api接口：分享按钮，微博发布窗，微博秀。
<a href="http://open.weibo.com/widget/publisher.php">微博发布窗</a>和<a href="http://app.weibo.com/tool/weiboshow">微博秀</a>放在博客的asides里，代码由上面链接中自动提供，在<code>source/_include/asides/weibo.html</code>里加入即可。分享按钮的添加方式在<a href="http://blog.jiang-kai.com/blog/2013/10/14/ru-he-tian-jia-xin-lang-wei-bo-zhuan-fa-gong-neng/">上一篇博客</a>中有详细描述。</p>

<p>完成上述代码添加后，即可在博客界面上查看特定微博，发送微博，转发微博操作，但是这样会有一个问题，转发微博后展示页面左下方来源会显示<code>来自分享按钮</code>，发送微博后显示<code>来自未经审核应用</code>，这是因为新浪微博会为每个接入网站或者应用提供一个appkey，如果网站或者应用没有经过新浪的审核，则会有如上显示。</p>

<p>解决这个问题的方法就是在<a href="http://open.weibo.com">新浪微博开放平台</a>中进行三步认证（手续极具中国特色，但相对来说新浪效率还是不错的），首先是填写开发者资料，各种个人信息和联系方式等，审核过了以后需要提供身份认证，主要就是上传身份证照片，提供身份证号，实名登记，哎~~，经过大致一天审核后，就可以添加自己的网站或应用了。在<a href="http://open.weibo.com/webmaster/add">添加新网站</a>界面填写信息，网站名称和域名，域名一定要是网站根域名，否则会给后面带来麻烦。另外需要在自己的界面中增加如下代码来经过审核：</p>

<pre><code>&lt;meta property="wb:webmaster" content="xxxxxx" /&gt;
</code></pre>

<!--more-->


<p>  <br/>
完成上述步骤后，进入最后一步网站或者应用审核了，也是最麻烦的一步，由于国情的原因，除了填写网站名称，域名，介绍等基本信息，还需要提供ISP备案信息（damn it！），大部分人走到这步心里估计就放弃了，个人站点博客之类的哪儿会去备案呢，何况是VPS，虚拟云主机或者干脆是Github托管，不过新浪厚道的提供了一个选项，站点是国内还是国外的，国内的需要ISP备案，国外的话不需要备案信息，但是需要提供一个海外网站证明扫描件，开始一头雾水，不知到这个证明是什么，不过在<a href="http://open.weibo.com/qa">微博开放平台问答</a>搜索下，会发现其实只要提供一个国际顶级域名注册证书即可，比如(<a href="http://www.now.cn/domain/cer.net?IDDomain=11888448">http://www.now.cn/domain/cer.net?IDDomain=11888448</a>)，这个证书在申请域名的提供商那里可以获得，比如我在<a href="http://www.ename.com">易名中国</a>注册的域名，在域名管理页面中提供域名证书功能，直接截图上传审核即可。</p>

<p>审核时间大致在大半天到一天左右，效率还是不错的，通过审核后，就正式可以接入微博了，在博客页面发布微博或者转发微博都会显示来源为XXX网站（名字为审核时填写的网站名称）。</p>

<p>不过在放置分享按钮时出现点小问题，一直都只能显示来自分享按钮，无法显示来自xxx网站，后面提取url一点点的debug发现新浪自动生成的appkey是经过编码的，可能是因为安全或者其他考虑，没有显示appkey明文，但是编码过的appkey就会带来上述问题，必须将代码中的appkey改成明文才能带来预想效果。</p>

<p>最后，如果你没有强迫症或者某种装X需要:),显示<code>来自未审核应用</code>也是可接受的，也就省去了上面麻烦令人崩溃的步骤。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何添加新浪微博转发功能]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/10/14/ru-he-tian-jia-xin-lang-wei-bo-zhuan-fa-gong-neng/"/>
    <updated>2013-10-14T02:58:00-07:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/10/14/ru-he-tian-jia-xin-lang-wei-bo-zhuan-fa-gong-neng</id>
    <content type="html"><![CDATA[<p>搭完整个blog的框架后，开始添加一些widget，首当其冲的就是新浪微博的转发功能。</p>

<p>新浪微博提供了开发平台，可以在其提供的接口下添加相应代码完成相应功能。添加微博转发功能到个人网站主要参考了<a href="http://open.weibo.com/sharebutton">微博分享按钮</a>。</p>

<p>在当前octopress框架下实现主要分以下几步：</p>

<ul>
<li>修改<code>_config.yml</code></li>
</ul>


<p>添加以下内容：</p>

<pre><code># Sina weibo
weibo_share_button: true
</code></pre>

<p>可方便在配置文件中进行功能开启关闭。</p>

<!-- more -->


<ul>
<li>在source/_include/里添加一个html文件weibo.html</li>
</ul>


<p>添加内容：</p>

<pre><code>% if site.weibo_share_button %
&lt;html xmlns:wb="http://open.weibo.com/wb"&gt;
&lt;script src="http://tjs.sjs.sinajs.cn/open/api/js/wb.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;wb:share-button addition="number" type="button" default_text="来自jiangkai's blog" ralateUid="1639057585"&gt;&lt;/wb:share-button&gt;
% endif %
</code></pre>

<p>第一行是XML命名空间，第二行为需要添加的js，第三行为WBML代码，定制转发微博相应动作。
需要注意,default_text不为空，则转发的微博带上该默认文字，如果没有default_text的话，则转发的时候会自动抓取页面标题，ralateUid为转发该微博的时候会@的微博用户。</p>

<ul>
<li>修改source/_include/article.html</li>
</ul>


<p>在该行下</p>

<pre><code>&lt;div class="entry-content"&gt;&lt;/div&gt;
</code></pre>

<p>添加</p>

<pre><code>% include weibo.html %
</code></pre>

<p>这样在每篇blog的下方增加微博转发按钮。</p>

<p>需要注意的是，在<a href="http://open.weibo.com/sharebutton">微博分享按钮</a>里的第二步非必须，除非有需要在微博中显示转发来源网页或者应用用于推广，如果跳过网站或者应用上线并审核，那么分享的微博下方会显示来自分享按钮，否则会显示来自xxx网站或者应用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.jiang-kai.com/blog/2013/10/12/hello-world/"/>
    <updated>2013-10-12T21:34:00-07:00</updated>
    <id>http://blog.jiang-kai.com/blog/2013/10/12/hello-world</id>
    <content type="html"><![CDATA[<p>想法就要付诸实践</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
